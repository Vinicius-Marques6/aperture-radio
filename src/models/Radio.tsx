/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\public\radio.glb -t -T 
Files: .\public\radio.glb [6.4MB] > D:\dev\aperture-radio\radio-transformed.glb [813.4KB] (87%)
*/

import * as THREE from 'three'
import { PositionalAudio, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { JSX, Suspense, useState } from 'react'

type GLTFResult = GLTF & {
  nodes: {
    Radio_Radio_Screen_0_1: THREE.Mesh
    Radio_Radio_Screen_0_2: THREE.Mesh
    Radio_Radio_Screen_0_3: THREE.Mesh
    Radio_Radio_Screen_0_4: THREE.Mesh
    Radio_Radio_Screen_0_5: THREE.Mesh
    Radio_Radio_Screen_0_6: THREE.Mesh
    Radio_Radio_Screen_0_7: THREE.Mesh
    Radio_Radio_Screen_0_8: THREE.Mesh
    Radio_Radio_Screen_0_9: THREE.Mesh
    Radio_Radio_Screen_0_10: THREE.Mesh
    Radio_Radio_Screen_0_11: THREE.Mesh
  }
  materials: {
    Radio_Screen: THREE.MeshStandardMaterial
    Radio: THREE.MeshStandardMaterial
    Shell: THREE.MeshStandardMaterial
    Base: THREE.MeshStandardMaterial
    Button: THREE.MeshStandardMaterial
    Antenna: THREE.MeshStandardMaterial
    Light: THREE.MeshStandardMaterial
    Radio_Grid: THREE.MeshStandardMaterial
    Button_Rifled: THREE.MeshStandardMaterial
    Light_Off: THREE.MeshStandardMaterial
    Radio_Screen_Off: THREE.MeshStandardMaterial
  }
}

export function Radio(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/radio.glb') as unknown as GLTFResult
 
  const [on, setOn] = useState(false) 

  return (
    <group {...props} dispose={null} onClick={() => setOn(!on)}>
      <group position={[0, 0.601, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Radio_Radio_Screen_0_1.geometry} material={on ? materials.Radio_Screen : materials.Radio_Screen_Off} />
        <mesh castShadow receiveShadow geometry={nodes.Radio_Radio_Screen_0_2.geometry} material={materials.Radio} />
        <mesh castShadow receiveShadow geometry={nodes.Radio_Radio_Screen_0_3.geometry} material={materials.Shell} />
        <mesh castShadow receiveShadow geometry={nodes.Radio_Radio_Screen_0_4.geometry} material={materials.Base} />
        <mesh castShadow receiveShadow geometry={nodes.Radio_Radio_Screen_0_5.geometry} material={materials.Button} />
        <mesh castShadow receiveShadow geometry={nodes.Radio_Radio_Screen_0_6.geometry} material={materials.Antenna} />
        <mesh castShadow receiveShadow geometry={nodes.Radio_Radio_Screen_0_7.geometry} material={on ? materials.Light : materials.Light_Off} />
        <mesh castShadow receiveShadow geometry={nodes.Radio_Radio_Screen_0_8.geometry} material={materials.Radio_Grid} />
        <mesh castShadow receiveShadow geometry={nodes.Radio_Radio_Screen_0_9.geometry} material={materials.Button_Rifled} />
      </group>
      <Suspense>
        {on && (
          <PositionalAudio
            url="/Still_alive_Radio.mp3"
            distance={1}
            loop
            autoplay
          />
        )}
      </Suspense>
    </group>
  )
}

useGLTF.preload('/radio.glb')
